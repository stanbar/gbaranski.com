<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on gbaranski</title><link>/posts/</link><description>Recent content in Posts on gbaranski</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating ncurses-like TUI Applications in Rust using Cursive</title><link>/posts/rust-tui/</link><pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate><guid>/posts/rust-tui/</guid><description>Introduction This post is my process of creating TUI application in Rust for Houseflow, it will be used to trigger some events on embedded devices, like turning on lights and etc.
Goal I&amp;rsquo;d like to make something similar to ncspot, Spotify Client in CLI, which is using cursive.
Getting started The first step is to initialize an empty project
cargo new --bin rust-blog-tui This will create a directory with the given name and few files inside.</description><content>
&lt;p>
&lt;img src="/img/rust-tui/cover.png"
&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This post is my process of creating TUI application in Rust for Houseflow, it
will be used to trigger some events on embedded devices, like turning on lights
and etc.&lt;/p>
&lt;h2 id="goal">Goal&lt;/h2>
&lt;p>I&amp;rsquo;d like to make something similar to &lt;a href="https://github.com/hrkfdn/ncspot">&lt;code>ncspot&lt;/code>&lt;/a>, Spotify Client in CLI, which is using &lt;a href="https://github.com/gyscos/cursive">&lt;code>cursive&lt;/code>&lt;/a>.&lt;/p>
&lt;p>&lt;img src="/img/ncspot-screenshot.png" alt="screenshot of running ncspot">&lt;/p>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;p>The first step is to initialize an empty project&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cargo new --bin rust-blog-tui
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will create a directory with the given name and few files inside. Let&amp;rsquo;s start by adding &lt;a href="https://github.com/gyscos/cursive">&lt;code>cursive&lt;/code>&lt;/a> crate to dependencies, &lt;a href="#why-cursive">here is why I chose it&lt;/a>, and also &lt;a href="https://github.com/dtolnay/anyhow">&lt;code>anyhow&lt;/code>&lt;/a> for easier error handling. That&amp;rsquo;s how our &lt;code>Cargo.toml&lt;/code> shoud look like:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">&lt;span style="color:#75715e"># Cargo.toml&lt;/span>
[&lt;span style="color:#a6e22e">package&lt;/span>]
&lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;rust-blog-tui&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">version&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.1.0&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">edition&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;2018&amp;#34;&lt;/span>
[&lt;span style="color:#a6e22e">dependencies&lt;/span>]
&lt;span style="color:#a6e22e">cursive&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.16&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">anyhow&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;1.0&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="setting-up-ui">Setting up UI&lt;/h3>
&lt;p>The first step is showing a simple UI in our &lt;code>main&lt;/code> function inside &lt;code>src/main.rs&lt;/code> file&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> cursive::views::{Dialog, TextView};
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() -&amp;gt; &lt;span style="color:#a6e22e">anyhow&lt;/span>::Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>()&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#75715e">// Creates the cursive root - required for every application.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> siv &lt;span style="color:#f92672">=&lt;/span> cursive::default();
&lt;span style="color:#75715e">// Creates a dialog with a single &amp;#34;Quit&amp;#34; button
&lt;/span>&lt;span style="color:#75715e">&lt;/span> siv.add_layer(Dialog::around(TextView::new(&lt;span style="color:#e6db74">&amp;#34;Hello Dialog!&amp;#34;&lt;/span>))
.title(&lt;span style="color:#e6db74">&amp;#34;Cursive&amp;#34;&lt;/span>)
.button(&lt;span style="color:#e6db74">&amp;#34;Quit&amp;#34;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>s&lt;span style="color:#f92672">|&lt;/span> s.quit()));
&lt;span style="color:#75715e">// Starts the event loop.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> siv.run();
Ok(())
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice the &lt;code>main&lt;/code> return type, we&amp;rsquo;re using &lt;code>Result&lt;/code> from &lt;code>anyhow&lt;/code> crate, that will allow us returning &lt;code>anyhow::Error&lt;/code> directly from &lt;code>main&lt;/code> function.&lt;/p>
&lt;p>We can now test if it works by running&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cargo run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What we should see is screen with simple Dialog&lt;/p>
&lt;p>&lt;img src="/img/rust-tui/basic.png" alt="screenshot of program with dialog on middle of the screen">&lt;/p>
&lt;h3 id="defining-types-for-device">Defining types for Device&lt;/h3>
&lt;p>Let&amp;rsquo;s define some types which we will use for storing devices in memory&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/device.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#e6db74">/// Used to identify the device
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#75715e">#[derive(Debug, Clone)]&lt;/span>
&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">DeviceID&lt;/span> {
inner: [&lt;span style="color:#66d9ef">u8&lt;/span>; &lt;span style="color:#ae81ff">16&lt;/span>],
}
&lt;span style="color:#75715e">#[derive(Debug, Clone)]&lt;/span>
&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Device&lt;/span> {
&lt;span style="color:#66d9ef">pub&lt;/span> id: &lt;span style="color:#a6e22e">DeviceID&lt;/span>,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And use them inside &lt;code>main.rs&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">mod&lt;/span> device;
&lt;span style="color:#66d9ef">use&lt;/span> device::{Device, DeviceID};
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="generating-fake-devices">Generating fake devices&lt;/h3>
&lt;p>Since we&amp;rsquo;re not operating on real devices yet, we&amp;rsquo;ll generate fake devices, for random numbers we&amp;rsquo;ll need &lt;a href="https://lib.rs/crates/rand">&lt;code>rand&lt;/code>&lt;/a>, add this to our &lt;code>Cargo.toml&lt;/code> dependencies section&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">&lt;span style="color:#75715e"># Cargo.toml&lt;/span>
&lt;span style="color:#75715e"># ...&lt;/span>
[&lt;span style="color:#a6e22e">dependencies&lt;/span>]
&lt;span style="color:#a6e22e">rand&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.8&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># ...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="random-device-ids">Random Device IDs&lt;/h5>
&lt;p>To generate DeviceID using &lt;code>rand&lt;/code>, we&amp;rsquo;ll need to implement a Distribution for it&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/device.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> rand::distributions;
&lt;span style="color:#66d9ef">impl&lt;/span> distributions::Distribution&lt;span style="color:#f92672">&amp;lt;&lt;/span>DeviceID&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> distributions::Standard {
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">sample&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>R: &lt;span style="color:#a6e22e">rand&lt;/span>::Rng &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">?&lt;/span>Sized&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self, rng: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> R) -&amp;gt; &lt;span style="color:#a6e22e">DeviceID&lt;/span> {
DeviceID { inner: &lt;span style="color:#a6e22e">rng&lt;/span>.gen() }
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="iter-of-random-devices">Iter of random devices&lt;/h5>
&lt;p>Since we&amp;rsquo;ve got function which will generate random DeviceID for us, we can create function which will return infinite Iterator of Device&amp;rsquo;s with random DeviceID&amp;rsquo;s&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/device.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#e6db74">/// Creates a infinite Iterator of fake devices
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">get_devices&lt;/span>() -&amp;gt; &lt;span style="color:#a6e22e">impl&lt;/span> Iterator&lt;span style="color:#f92672">&amp;lt;&lt;/span>Item &lt;span style="color:#f92672">=&lt;/span> Device&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
std::iter::repeat_with(&lt;span style="color:#f92672">||&lt;/span> Device { id: &lt;span style="color:#a6e22e">rand&lt;/span>::random() })
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And also import this function inside &lt;code>main.rs&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> device::{Device, DeviceID, get_devices};
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="displaying-list-of-devices-to-user">Displaying list of devices to user&lt;/h3>
&lt;p>To present &lt;code>DeviceID&lt;/code> to user, we need to implement &lt;code>std::fmt::Display&lt;/code> trait on it, we&amp;rsquo;re going to use hex encoding of inner bytes, so we&amp;rsquo;ll need &lt;a href="https://lib.rs/crates/hex">&lt;code>hex&lt;/code>&lt;/a> crate, let&amp;rsquo;s add it to our &lt;code>Cargo.toml&lt;/code> dependencies section.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">&lt;span style="color:#75715e"># Cargo.toml&lt;/span>
&lt;span style="color:#75715e"># ...&lt;/span>
[&lt;span style="color:#a6e22e">dependencies&lt;/span>]
&lt;span style="color:#a6e22e">hex&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.4&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># ...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And implementation of &lt;code>std::fmt::Display&lt;/code> for &lt;code>DeviceID&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/device.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> std::fmt;
&lt;span style="color:#66d9ef">impl&lt;/span> fmt::Display &lt;span style="color:#66d9ef">for&lt;/span> DeviceID {
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self, f: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> fmt::Formatter&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;_&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>) -&amp;gt; &lt;span style="color:#a6e22e">fmt&lt;/span>::Result {
write&lt;span style="color:#f92672">!&lt;/span>(f, &lt;span style="color:#e6db74">&amp;#34;{}&amp;#34;&lt;/span>, hex::encode(self.inner))
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="selectview">SelectView&lt;/h5>
&lt;p>To display list of devices on which we can click, we&amp;rsquo;re going to use &lt;a href="https://docs.rs/cursive/0.16.3/cursive/views/struct.SelectView.html">&lt;code>SelectView&lt;/code>&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> cursive::{views::SelectView, Cursive, View};
&lt;span style="color:#e6db74">/// Returns SelectView whichs shows all available devices to user
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">get_devices_select_view&lt;/span>(
devices: Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>Device&lt;span style="color:#f92672">&amp;gt;&lt;/span>,
submit_callback: &lt;span style="color:#a6e22e">impl&lt;/span> &amp;#39;static &lt;span style="color:#f92672">+&lt;/span> Fn(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> Cursive, Device),
) -&amp;gt; &lt;span style="color:#a6e22e">impl&lt;/span> View {
&lt;span style="color:#66d9ef">let&lt;/span> devices_cursive_iter &lt;span style="color:#f92672">=&lt;/span> devices
.iter()
.enumerate()
.map(&lt;span style="color:#f92672">|&lt;/span>(index, device)&lt;span style="color:#f92672">|&lt;/span> (device.id.to_string(), index));
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> view &lt;span style="color:#f92672">=&lt;/span> SelectView::new();
view.add_all(devices_cursive_iter);
view.set_on_submit(&lt;span style="color:#66d9ef">move&lt;/span> &lt;span style="color:#f92672">|&lt;/span>siv, index&lt;span style="color:#f92672">|&lt;/span> {
&lt;span style="color:#66d9ef">let&lt;/span> device &lt;span style="color:#f92672">=&lt;/span> devices.get(&lt;span style="color:#f92672">*&lt;/span>index).unwrap();
submit_callback(siv, device.clone())
});
view
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now show it to user in &lt;code>main&lt;/code> function&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() -&amp;gt; &lt;span style="color:#a6e22e">anyhow&lt;/span>::Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>()&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#75715e">// Creates the cursive root - required for every application.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> siv &lt;span style="color:#f92672">=&lt;/span> cursive::default();
&lt;span style="color:#66d9ef">let&lt;/span> devices &lt;span style="color:#f92672">=&lt;/span> get_devices().take(&lt;span style="color:#ae81ff">10&lt;/span>).collect();
&lt;span style="color:#66d9ef">let&lt;/span> devices_select_view &lt;span style="color:#f92672">=&lt;/span> get_devices_select_view(devices, &lt;span style="color:#f92672">|&lt;/span>siv, _device&lt;span style="color:#f92672">|&lt;/span> siv.quit());
&lt;span style="color:#75715e">// Create a dialog with devices select view
&lt;/span>&lt;span style="color:#75715e">&lt;/span> siv.add_layer(Dialog::around(devices_select_view));
&lt;span style="color:#75715e">// Starts the event loop.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> siv.run();
Ok(())
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And it looks something like that&lt;/p>
&lt;p>&lt;img src="/img/rust-tui/selectview.png" alt="screenshot of program with selectview">&lt;/p>
&lt;h4 id="showing-dialog-to-user-on-submit-callback">Showing dialog to user on submit callback&lt;/h4>
&lt;p>Currently selecting some device simply closes the program, we&amp;rsquo;re going to show Dialog with available options for specific device&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">submit_callback&lt;/span>(siv: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> Cursive, device: &lt;span style="color:#a6e22e">Device&lt;/span>) {
&lt;span style="color:#66d9ef">let&lt;/span> text_view &lt;span style="color:#f92672">=&lt;/span> TextView::new(&lt;span style="color:#e6db74">&amp;#34;Select what to do with the device&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> dialog_title &lt;span style="color:#f92672">=&lt;/span> format&lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Selected device: {}&amp;#34;&lt;/span>, device.id);
&lt;span style="color:#66d9ef">let&lt;/span> dialog &lt;span style="color:#f92672">=&lt;/span> Dialog::around(text_view)
.title(dialog_title)
.button(&lt;span style="color:#e6db74">&amp;#34;Send Command&amp;#34;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>siv&lt;span style="color:#f92672">|&lt;/span> siv.quit())
.button(&lt;span style="color:#e6db74">&amp;#34;Cancel&amp;#34;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>siv&lt;span style="color:#f92672">|&lt;/span> {
siv.pop_layer();
});
siv.add_layer(dialog);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And use it in &lt;code>main&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() -&amp;gt; &lt;span style="color:#a6e22e">anyhow&lt;/span>::Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>()&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#75715e">// Creates the cursive root - required for every application.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> siv &lt;span style="color:#f92672">=&lt;/span> cursive::default();
&lt;span style="color:#66d9ef">let&lt;/span> devices &lt;span style="color:#f92672">=&lt;/span> get_devices().take(&lt;span style="color:#ae81ff">10&lt;/span>).collect();
&lt;span style="color:#66d9ef">let&lt;/span> devices_select_view &lt;span style="color:#f92672">=&lt;/span> get_devices_select_view(devices, submit_callback);
&lt;span style="color:#75715e">// Create a dialog with devices select view
&lt;/span>&lt;span style="color:#75715e">&lt;/span> siv.add_layer(Dialog::around(devices_select_view));
&lt;span style="color:#75715e">// Starts the event loop.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> siv.run();
Ok(())
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now we&amp;rsquo;re able to select specific device, and dialog will pop up&lt;/p>
&lt;p>&lt;img src="/img/rust-tui/dialog-popup.png" alt="screenshot of program with selectview with dialog">&lt;/p>
&lt;h4 id="sending-http-request-with-send-command-button">Sending HTTP request with Send Command button&lt;/h4>
&lt;p>Currently &amp;ldquo;Send Command&amp;rdquo; Button closes program, we&amp;rsquo;re going to implement sending HTTP Request, for that we&amp;rsquo;ll need &lt;a href="https://lib.rs/crates/reqwest">&lt;code>reqwest&lt;/code>&lt;/a> and &lt;a href="https://lib.rs/crates/cursive-async-view">&lt;code>cursive-async-view&lt;/code>&lt;/a> for displaying loader.&lt;/p>
&lt;p>Add them to dependencies section in our &lt;code>Cargo.toml&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">&lt;span style="color:#75715e"># Cargo.toml&lt;/span>
&lt;span style="color:#75715e"># ...&lt;/span>
[&lt;span style="color:#a6e22e">dependencies&lt;/span>]
&lt;span style="color:#a6e22e">cursive&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">async&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">view&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.5&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">reqwest&lt;/span> = { &lt;span style="color:#a6e22e">version&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.11&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">default&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">-&lt;/span>&lt;span style="color:#a6e22e">features&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#a6e22e">features&lt;/span> = [ &lt;span style="color:#e6db74">&amp;#34;blocking&amp;#34;&lt;/span> ] }
&lt;span style="color:#75715e"># ...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add function which will be called on &amp;ldquo;Send Command&amp;rdquo; button press&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> cursive_async_view::AsyncView;
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">send_command&lt;/span>(siv: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> Cursive, _device: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Device&lt;/span>) {
&lt;span style="color:#66d9ef">let&lt;/span> client &lt;span style="color:#f92672">=&lt;/span> reqwest::blocking::Client::new();
&lt;span style="color:#66d9ef">let&lt;/span> request &lt;span style="color:#f92672">=&lt;/span> client.post(&lt;span style="color:#e6db74">&amp;#34;http://httpbin.org/delay/1&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> async_view &lt;span style="color:#f92672">=&lt;/span> AsyncView::new_with_bg_creator(
siv,
&lt;span style="color:#66d9ef">move&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> request.send() {
Ok(response) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Ok(response.status().to_string()),
Err(err) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Err(err.to_string()),
},
TextView::new,
);
&lt;span style="color:#66d9ef">let&lt;/span> async_view_width &lt;span style="color:#f92672">=&lt;/span> siv.screen_size().x &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>;
&lt;span style="color:#66d9ef">let&lt;/span> async_view &lt;span style="color:#f92672">=&lt;/span> Dialog::around(async_view.with_width(async_view_width)).button(&lt;span style="color:#e6db74">&amp;#34;Ok&amp;#34;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>siv&lt;span style="color:#f92672">|&lt;/span> {
siv.pop_layer();
});
siv.add_layer(async_view);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And update &lt;code>submit_callback&lt;/code> to call tihs function&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">submit_callback&lt;/span>(siv: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> Cursive, device: &lt;span style="color:#a6e22e">Device&lt;/span>) {
&lt;span style="color:#66d9ef">let&lt;/span> text_view &lt;span style="color:#f92672">=&lt;/span> TextView::new(&lt;span style="color:#e6db74">&amp;#34;Select what to do with the device&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> dialog_title &lt;span style="color:#f92672">=&lt;/span> format&lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Selected device: {}&amp;#34;&lt;/span>, device.id);
&lt;span style="color:#66d9ef">let&lt;/span> dialog &lt;span style="color:#f92672">=&lt;/span> Dialog::around(text_view)
.title(dialog_title)
.button(&lt;span style="color:#e6db74">&amp;#34;Send Command&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">move&lt;/span> &lt;span style="color:#f92672">|&lt;/span>siv&lt;span style="color:#f92672">|&lt;/span> send_command(siv, &lt;span style="color:#f92672">&amp;amp;&lt;/span>device))
.button(&lt;span style="color:#e6db74">&amp;#34;Cancel&amp;#34;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>siv&lt;span style="color:#f92672">|&lt;/span> {
siv.pop_layer();
});
siv.add_layer(dialog);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="/img/rust-tui/send-http-request.gif" alt="gif of program sending http request">&lt;/p>
&lt;h2 id="fixing-movement">Fixing movement&lt;/h2>
&lt;p>Currently we need to use arrows to navigate, which is quite inconvenient, let&amp;rsquo;s add navigation with h/j/k/l just like in Vim.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#75715e">// src/main.rs
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">use&lt;/span> cursive::{
event::EventResult,
views::{OnEventView, SelectView},
Cursive, View,
};
&lt;span style="color:#e6db74">/// Returns SelectView whichs shows all available devices to user
&lt;/span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">get_devices_select_view&lt;/span>(
devices: Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>Device&lt;span style="color:#f92672">&amp;gt;&lt;/span>,
submit_callback: &lt;span style="color:#a6e22e">impl&lt;/span> &amp;#39;static &lt;span style="color:#f92672">+&lt;/span> Fn(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> Cursive, Device),
) -&amp;gt; &lt;span style="color:#a6e22e">impl&lt;/span> View {
&lt;span style="color:#66d9ef">let&lt;/span> devices_cursive_iter &lt;span style="color:#f92672">=&lt;/span> devices
.iter()
.enumerate()
.map(&lt;span style="color:#f92672">|&lt;/span>(index, device)&lt;span style="color:#f92672">|&lt;/span> (device.id.to_string(), index));
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> view &lt;span style="color:#f92672">=&lt;/span> SelectView::new();
view.add_all(devices_cursive_iter);
view.set_on_submit(&lt;span style="color:#66d9ef">move&lt;/span> &lt;span style="color:#f92672">|&lt;/span>siv, index&lt;span style="color:#f92672">|&lt;/span> {
&lt;span style="color:#66d9ef">let&lt;/span> device &lt;span style="color:#f92672">=&lt;/span> devices.get(&lt;span style="color:#f92672">*&lt;/span>index).unwrap();
submit_callback(siv, device.clone())
});
OnEventView::new(view)
.on_pre_event_inner(&lt;span style="color:#e6db74">&amp;#39;k&amp;#39;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>siv, _&lt;span style="color:#f92672">|&lt;/span> {
&lt;span style="color:#66d9ef">let&lt;/span> cb &lt;span style="color:#f92672">=&lt;/span> siv.select_up(&lt;span style="color:#ae81ff">1&lt;/span>); &lt;span style="color:#75715e">// Move up
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Some(EventResult::Consumed(Some(cb)))
})
.on_pre_event_inner(&lt;span style="color:#e6db74">&amp;#39;j&amp;#39;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>siv, _&lt;span style="color:#f92672">|&lt;/span> {
&lt;span style="color:#66d9ef">let&lt;/span> cb &lt;span style="color:#f92672">=&lt;/span> siv.select_down(&lt;span style="color:#ae81ff">1&lt;/span>); &lt;span style="color:#75715e">// Move down
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Some(EventResult::Consumed(Some(cb)))
})
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now inside Dialogs&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-rust" data-lang="rust">&lt;span style="color:#66d9ef">use&lt;/span> cursive::{
direction::{Absolute, Direction},
event::{Event, EventTrigger},
};
&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">submit_callback&lt;/span>(siv: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> Cursive, device: &lt;span style="color:#a6e22e">Device&lt;/span>) {
&lt;span style="color:#66d9ef">let&lt;/span> text_view &lt;span style="color:#f92672">=&lt;/span> TextView::new(&lt;span style="color:#e6db74">&amp;#34;Select what to do with the device&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> dialog_title &lt;span style="color:#f92672">=&lt;/span> format&lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Selected device: {}&amp;#34;&lt;/span>, device.id);
&lt;span style="color:#66d9ef">let&lt;/span> dialog &lt;span style="color:#f92672">=&lt;/span> Dialog::around(text_view)
.title(dialog_title)
.button(&lt;span style="color:#e6db74">&amp;#34;Send Command&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">move&lt;/span> &lt;span style="color:#f92672">|&lt;/span>siv&lt;span style="color:#f92672">|&lt;/span> send_command(siv, &lt;span style="color:#f92672">&amp;amp;&lt;/span>device))
.button(&lt;span style="color:#e6db74">&amp;#34;Cancel&amp;#34;&lt;/span>, &lt;span style="color:#f92672">|&lt;/span>siv&lt;span style="color:#f92672">|&lt;/span> {
siv.pop_layer();
});
&lt;span style="color:#66d9ef">let&lt;/span> dialog &lt;span style="color:#f92672">=&lt;/span> OnEventView::new(dialog)
.on_pre_event_inner(
EventTrigger::none()
.or(Event::Char(&lt;span style="color:#e6db74">&amp;#39;h&amp;#39;&lt;/span>))
.or(Event::Char(&lt;span style="color:#e6db74">&amp;#39;k&amp;#39;&lt;/span>)),
&lt;span style="color:#f92672">|&lt;/span>siv, _&lt;span style="color:#f92672">|&lt;/span> {
siv.take_focus(Direction::Abs(Absolute::Left));
Some(EventResult::Consumed(None))
},
)
.on_pre_event_inner(
EventTrigger::none()
.or(Event::Char(&lt;span style="color:#e6db74">&amp;#39;l&amp;#39;&lt;/span>))
.or(Event::Char(&lt;span style="color:#e6db74">&amp;#39;j&amp;#39;&lt;/span>)),
&lt;span style="color:#f92672">|&lt;/span>siv, _&lt;span style="color:#f92672">|&lt;/span> {
siv.take_focus(Direction::Abs(Absolute::Right));
Some(EventResult::Consumed(None))
},
);
siv.add_layer(dialog);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Full source code is availabe on &lt;a href="https://github.com/gbaranski/houseflow/tree/881977b8606fe554c6dc5aed38d916ad7f0efab2/tui">Github&lt;/a> as a part of &lt;a href="/projects#houseflow">Houseflow&lt;/a> project&lt;/p>
&lt;h2 id="why-cursive">Why cursive?&lt;/h2>
&lt;p>I&amp;rsquo;ve choosed it over &lt;a href="https://github.com/fdehau/tui-rs">&lt;code>tui-rs&lt;/code>&lt;/a>, because &lt;code>cursive&lt;/code> provides a lot of nice built-in widgets, and suits better to my use-case, you can check out comparsion made by &lt;code>cursive&lt;/code> &lt;a href="https://github.com/gyscos/cursive/wiki/Cursive-vs-tui%E2%80%90rs">here&lt;/a>.&lt;/p></content></item></channel></rss>